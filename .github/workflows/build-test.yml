# Build and Test Workflow for NotizDesktop Application
# This workflow can be triggered manually to test builds without creating releases

name: Build and Test

on:
  workflow_dispatch:  # Manual trigger only
    inputs:
      create_prerelease:
        description: 'Create a pre-release with build artifacts'
        required: false
        default: false
        type: boolean
      prerelease_tag:
        description: 'Pre-release tag (e.g., v1.0.0-beta.1)'
        required: false
        default: 'v0.0.0-test'

jobs:
  build-test:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write  # Required for creating pre-releases
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Download dependencies
      run: |
        mkdir -p lib
        echo "Downloading dependencies..."
        wget -q -O lib/mysql-connector-java-8.0.23.jar https://repo1.maven.org/maven2/mysql/mysql-connector-java/8.0.23/mysql-connector-java-8.0.23.jar
        wget -q -O lib/spring-security-crypto-5.7.2.jar https://repo1.maven.org/maven2/org/springframework/security/spring-security-crypto/5.7.2/spring-security-crypto-5.7.2.jar
        wget -q -O lib/slf4j-api-1.7.36.jar https://repo1.maven.org/maven2/org/slf4j/slf4j-api/1.7.36/slf4j-api-1.7.36.jar
        wget -q -O lib/logback-classic-1.2.12.jar https://repo1.maven.org/maven2/ch/qos/logback/logback-classic/1.2.12/logback-classic-1.2.12.jar
        wget -q -O lib/logback-core-1.2.12.jar https://repo1.maven.org/maven2/ch/qos/logback/logback-core/1.2.12/logback-core-1.2.12.jar
        wget -q -O lib/commons-logging-1.2.jar https://repo1.maven.org/maven2/commons-logging/commons-logging/1.2/commons-logging-1.2.jar
        
    - name: Build project
      run: |
        echo "Building project with Ant..."
        ant clean compile jar fatjar javadoc
        
    - name: Run tests
      run: |
        echo "Running tests..."
        ant test || echo "Tests completed (some may have failed - this is expected for integration tests without database)"
        
    - name: Verify build
      run: |
        echo "=== Build Verification ==="
        echo "Compiled classes:"
        find build -name "*.class" | wc -l
        echo ""
        echo "Generated JARs:"
        ls -la dist/*.jar 2>/dev/null || echo "No JAR files found"
        echo ""
        echo "JavaDoc files:"
        find javadoc -name "*.html" 2>/dev/null | wc -l || echo "No JavaDoc generated"
        echo ""
        echo "Dependencies:"
        ls -la lib/
        
    - name: Test JAR execution
      run: |
        echo "Testing JAR file structure..."
        if [ -f "dist/NotizDesktop.jar" ]; then
          echo "Regular JAR contents:"
          jar -tf dist/NotizDesktop.jar | head -10
          echo "..."
        fi
        
        if [ -f "dist/NotizDesktop-with-dependencies.jar" ]; then
          echo "Fat JAR contents:"
          jar -tf dist/NotizDesktop-with-dependencies.jar | head -10
          echo "..."
          echo "Fat JAR size: $(du -h dist/NotizDesktop-with-dependencies.jar | cut -f1)"
        fi
        
    - name: Create test package
      if: ${{ github.event.inputs.create_prerelease == 'true' }}
      run: |
        mkdir -p test-package
        cp dist/*.jar test-package/ 2>/dev/null || echo "No JAR files to copy"
        cp -r lib test-package/ 2>/dev/null || echo "No lib directory to copy"
        cp README.md test-package/ 2>/dev/null || echo "No README to copy"
        
        # Create simple run script
        cat > test-package/run-test.sh << 'EOF'
        #!/bin/bash
        echo "This is a test build. To run the application:"
        echo "java -jar NotizDesktop-with-dependencies.jar"
        echo "or"
        echo "java -cp \"NotizDesktop.jar:lib/*\" notizapp.NotizDesktopApplication"
        EOF
        chmod +x test-package/run-test.sh
        
        tar -czf NotizDesktop-test-build.tar.gz -C test-package .
        
    - name: Create pre-release
      if: ${{ github.event.inputs.create_prerelease == 'true' }}
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.event.inputs.prerelease_tag }}
        name: "NotizDesktop Test Build - ${{ github.event.inputs.prerelease_tag }}"
        body: |
          # 🧪 Test Build - NotizDesktop
          
          This is a **test/development build** created for testing purposes.
          
          ## ⚠️ Important Notes
          - This is NOT a stable release
          - Use for testing and development only
          - May contain bugs or incomplete features
          - Database setup is still required
          
          ## 📦 Contents
          - Test build of NotizDesktop application
          - All dependencies included
          - Basic run scripts
          
          ## 🚀 Quick Test
          1. Download `NotizDesktop-test-build.tar.gz`
          2. Extract: `tar -xzf NotizDesktop-test-build.tar.gz`
          3. Run: `java -jar NotizDesktop-with-dependencies.jar`
          
          **Build Info:**
          - Commit: ${{ github.sha }}
          - Built: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          - Workflow: Manual trigger
        draft: false
        prerelease: true
        files: |
          NotizDesktop-test-build.tar.gz
          dist/NotizDesktop.jar
          dist/NotizDesktop-with-dependencies.jar
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: notizdesktop-test-build-${{ github.run_number }}
        path: |
          dist/
          javadoc/
          lib/
        retention-days: 7
        
    - name: Build Summary
      run: |
        echo "## 🔨 Build Test Completed!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "**Build Number:** ${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ✅ Build Results:" >> $GITHUB_STEP_SUMMARY
        
        if [ -f "dist/NotizDesktop.jar" ]; then
          echo "- ✅ Regular JAR created successfully" >> $GITHUB_STEP_SUMMARY
        else
          echo "- ❌ Regular JAR creation failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ -f "dist/NotizDesktop-with-dependencies.jar" ]; then
          echo "- ✅ Fat JAR created successfully" >> $GITHUB_STEP_SUMMARY
        else
          echo "- ❌ Fat JAR creation failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ -d "javadoc" ] && [ "$(find javadoc -name '*.html' | wc -l)" -gt 0 ]; then
          echo "- ✅ JavaDoc generated successfully" >> $GITHUB_STEP_SUMMARY
        else
          echo "- ⚠️ JavaDoc generation incomplete" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ github.event.inputs.create_prerelease }}" = "true" ]; then
          echo "### 🚀 Pre-release Created:" >> $GITHUB_STEP_SUMMARY
          echo "- **Tag:** ${{ github.event.inputs.prerelease_tag }}" >> $GITHUB_STEP_SUMMARY
          echo "- [View Pre-release](https://github.com/${{ github.repository }}/releases/tag/${{ github.event.inputs.prerelease_tag }})" >> $GITHUB_STEP_SUMMARY
        else
          echo "### 📦 Artifacts:" >> $GITHUB_STEP_SUMMARY
          echo "- Build artifacts uploaded for 7 days" >> $GITHUB_STEP_SUMMARY
          echo "- Check the 'Artifacts' section of this workflow run" >> $GITHUB_STEP_SUMMARY
        fi